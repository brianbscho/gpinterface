// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Gpi {
  id        Int      @id @default(autoincrement())
  hashId    String   @unique @map("hash_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  config        Json
  description   String
  isPublic      Boolean @default(false) @map("is_public")
  isDeployed    Boolean @default(false) @map("is_deployed")
  systemMessage String  @default("") @map("system_message")

  chatContents ChatContent[]
  histories    History[]
  sessions     Session[]

  modelHashId String  @map("model_hash_id")
  model       Model   @relation(fields: [modelHashId], references: [hashId], onDelete: Restrict, onUpdate: Cascade)
  userHashId  String? @map("user_hash_id")
  user        User?   @relation(fields: [userHashId], references: [hashId], onDelete: SetNull, onUpdate: Cascade)

  @@map("gpis")
}

model ApiKey {
  id        Int      @id @default(autoincrement())
  hashId    String   @unique @map("hash_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  key String @unique @map("key")

  userHashId String @map("user_hash_id")
  user       User   @relation(fields: [userHashId], references: [hashId], onDelete: Restrict, onUpdate: Cascade)

  @@map("api_keys")
}

model Session {
  id        Int      @id @default(autoincrement())
  hashId    String   @unique @map("hash_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  gpiHashId String? @map("gpi_hash_id")
  gpi       Gpi?    @relation(fields: [gpiHashId], references: [hashId], onDelete: SetNull, onUpdate: Cascade)

  histories History[]
  messages  SessionMessage[]

  @@map("sessions")
}

model SessionMessage {
  id        Int      @id @default(autoincrement())
  hashId    String   @unique @map("hash_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  role    String
  content String

  sessionHashId String  @map("session_hash_id")
  session       Session @relation(fields: [sessionHashId], references: [hashId], onDelete: Restrict, onUpdate: Cascade)

  @@map("session_messages")
}

model Config {
  id        Int      @id @default(autoincrement())
  hashId    String   @unique @map("hash_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  name        String
  type        String
  description String
  default     String?
  min         Float?
  max         Float?

  options         ConfigOption[]
  configsOnModels ConfigOnModel[]

  @@map("configs")
}

model ConfigOption {
  id        Int      @id @default(autoincrement())
  hashId    String   @unique @map("hash_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  value String

  configHashId String @map("config_hash_id")
  config       Config @relation(fields: [configHashId], references: [hashId], onDelete: Restrict, onUpdate: Cascade)

  @@map("config_options")
}

model ConfigOnModel {
  id        Int      @id @default(autoincrement())
  hashId    String   @unique @map("hash_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  configHashId String @map("config_hash_id")
  config       Config @relation(fields: [configHashId], references: [hashId], onDelete: Restrict, onUpdate: Cascade)
  modelHashId  String @map("model_hash_id")
  model        Model  @relation(fields: [modelHashId], references: [hashId], onDelete: Restrict, onUpdate: Cascade)

  @@map("configs_on_models")
}

model ChatContent {
  id        Int      @id @default(autoincrement())
  hashId    String   @unique @map("hash_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  role       String
  content    String
  config     Json?
  isModified Boolean @default(false) @map("is_modified")
  isDeployed Boolean @default(false) @map("is_deployed")

  gpiHashId   String  @map("gpi_hash_id")
  gpi         Gpi     @relation(fields: [gpiHashId], references: [hashId], onDelete: Cascade, onUpdate: Cascade)
  modelHashId String? @map("model_hash_id")
  model       Model?  @relation(fields: [modelHashId], references: [hashId], onDelete: Restrict, onUpdate: Cascade)

  histories History[]

  @@map("chat_contents")
}

model Model {
  id        Int      @id @default(autoincrement())
  hashId    String   @unique @map("hash_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  name                  String
  inputPricePerMillion  Float   @map("input_price_per_million")
  outputPricePerMillion Float   @map("output_price_per_million")
  isFree                Boolean @map("is_free")
  isLoginRequired       Boolean @map("is_login_required")
  isAvailable           Boolean @map("is_available")

  providerHashId String   @map("provider_hash_id")
  provider       Provider @relation(fields: [providerHashId], references: [hashId], onDelete: Restrict, onUpdate: Cascade)

  configs      ConfigOnModel[]
  chatContents ChatContent[]
  gpis         Gpi[]

  @@map("models")
}

model Provider {
  id        Int      @id @default(autoincrement())
  hashId    String   @unique @map("hash_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  name String

  typeHashId String       @map("provider_type_hash_id")
  type       ProviderType @relation(fields: [typeHashId], references: [hashId], onDelete: Restrict, onUpdate: Cascade)

  models Model[]

  @@map("providers")
}

model ProviderType {
  id        Int      @id @default(autoincrement())
  hashId    String   @unique @map("hash_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  type String

  providers Provider[]

  @@map("provider_types")
}

// * * * * * * * * * * * *
// User
// 

model Deposit {
  id        Int      @id @default(autoincrement())
  hashId    String   @unique @map("hash_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  amount Float

  userHashId String? @map("user_hash_id")
  user       User?   @relation(fields: [userHashId], references: [hashId], onDelete: SetNull, onUpdate: Cascade)

  @@map("deposits")
}

model History {
  id        Int      @id @default(autoincrement())
  hashId    String   @unique @map("hash_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  provider     String
  model        String
  config       Json
  messages     Json
  content      String
  response     Json
  price        Float
  paid         Float  @default(0)
  inputTokens  Int    @map("input_tokens")
  outputTokens Int    @map("output_tokens")

  gpiHashId         String?      @map("gpi_hash_id")
  gpi               Gpi?         @relation(fields: [gpiHashId], references: [hashId], onDelete: SetNull, onUpdate: Cascade)
  sessionHashId     String?      @map("session_hash_id")
  session           Session?     @relation(fields: [sessionHashId], references: [hashId], onDelete: SetNull, onUpdate: Cascade)
  chatContentHashId String?      @map("chat_content_hash_id")
  chatContent       ChatContent? @relation(fields: [chatContentHashId], references: [hashId], onDelete: SetNull, onUpdate: Cascade)
  userHashId        String?      @map("user_hash_id")
  user              User?        @relation(fields: [userHashId], references: [hashId], onDelete: Restrict, onUpdate: Cascade)

  @@map("histories")
}

model User {
  id        Int      @id @default(autoincrement())
  hashId    String   @unique @map("hash_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  email    String
  password String?
  name     String

  apiKeys   ApiKey[]
  deposits  Deposit[]
  gpis      Gpi[]
  histories History[]

  @@map("users")
}
