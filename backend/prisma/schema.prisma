// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// * * * * * * * * * * * *
// Post
// 

model Bookmark {
  id        Int      @id @default(autoincrement())
  hashId    String   @unique @map("hash_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  isBookmarked Boolean @map("is_bookmarked")

  postHashId String @map("post_hash_id")
  post       Post   @relation(fields: [postHashId], references: [hashId], onDelete: Cascade, onUpdate: Cascade)
  userHashId String @map("user_hash_id")
  user       User   @relation(fields: [userHashId], references: [hashId], onDelete: Cascade, onUpdate: Cascade)

  @@map("bookmarks")
}

model Comment {
  id        Int      @id @default(autoincrement())
  hashId    String   @unique @map("hash_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  comment String

  postHashId String  @map("post_hash_id")
  post       Post    @relation(fields: [postHashId], references: [hashId], onDelete: Cascade, onUpdate: Cascade)
  userHashId String? @map("user_hash_id")
  user       User?   @relation(fields: [userHashId], references: [hashId], onDelete: SetNull, onUpdate: Cascade)

  @@map("comments")
}

model Like {
  id        Int      @id @default(autoincrement())
  hashId    String   @unique @map("hash_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  isLiked Boolean @map("is_liked")

  postHashId String @map("post_hash_id")
  post       Post   @relation(fields: [postHashId], references: [hashId], onDelete: Cascade, onUpdate: Cascade)
  userHashId String @map("user_hash_id")
  user       User   @relation(fields: [userHashId], references: [hashId], onDelete: Cascade, onUpdate: Cascade)

  @@map("likes")
}

model Post {
  id        Int      @id @default(autoincrement())
  hashId    String   @unique @map("hash_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  title String
  post  String

  chatHashId String  @map("chat_hash_id")
  chat       Chat    @relation(fields: [chatHashId], references: [hashId], onDelete: Restrict, onUpdate: Cascade)
  userHashId String? @map("user_hash_id")
  user       User?   @relation(fields: [userHashId], references: [hashId], onDelete: SetNull, onUpdate: Cascade)

  bookmarks Bookmark[]
  likes     Like[]
  comments  Comment[]

  @@map("posts")
}

// * * * * * * * * * * * *
// Api
// 

model Api {
  id        Int      @id @default(autoincrement())
  hashId    String   @unique @map("hash_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  description String

  chatHashId String @map("chat_hash_id")
  chat       Chat   @relation(fields: [chatHashId], references: [hashId], onDelete: Restrict, onUpdate: Cascade)
  userHashId String @map("user_hash_id")
  user       User   @relation(fields: [userHashId], references: [hashId], onDelete: Cascade, onUpdate: Cascade)

  @@map("apis")
}

model ApiKey {
  id        Int      @id @default(autoincrement())
  hashId    String   @unique @map("hash_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  key String @unique @map("key")

  userHashId String @map("user_hash_id")
  user       User   @relation(fields: [userHashId], references: [hashId], onDelete: Restrict, onUpdate: Cascade)

  histories History[]

  @@map("api_keys")
}

// * * * * * * * * * * * *
// Chat
// 

model Chat {
  id        Int      @id @default(autoincrement())
  hashId    String   @unique @map("hash_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  systemMessage String @default("") @map("system_message")

  userHashId String @map("user_hash_id")
  user       User   @relation(fields: [userHashId], references: [hashId], onDelete: Restrict, onUpdate: Cascade)

  contents  Content[]
  apis      Api[]
  posts     Post[]
  histories History[]

  @@map("chats")
}

model Config {
  id        Int      @id @default(autoincrement())
  hashId    String   @unique @map("hash_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  name        String
  type        String
  description String
  default     String

  modelHashId String @map("model_hash_id")
  model       Model  @relation(fields: [modelHashId], references: [hashId], onDelete: Restrict, onUpdate: Cascade)

  options ConfigOption[]

  @@map("configs")
}

model ConfigOption {
  id        Int      @id @default(autoincrement())
  hashId    String   @unique @map("hash_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  value String

  configHashId String @map("config_hash_id")
  config       Config @relation(fields: [configHashId], references: [hashId], onDelete: Restrict, onUpdate: Cascade)

  @@map("config_options")
}

model Content {
  id        Int      @id @default(autoincrement())
  hashId    String   @unique @map("hash_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  role    String
  content String
  config  Json?

  chatHashId  String @map("chat_hash_id")
  chat        Chat   @relation(fields: [chatHashId], references: [hashId], onDelete: Restrict, onUpdate: Cascade)
  modelHashId String @map("model_hash_id")
  model       Model  @relation(fields: [modelHashId], references: [hashId], onDelete: Restrict, onUpdate: Cascade)

  @@map("contents")
}

model Model {
  id        Int      @id @default(autoincrement())
  hashId    String   @unique @map("hash_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  name                  String
  inputPricePerMillion  Float   @map("input_price_per_million")
  outputPricePerMillion Float   @map("output_price_per_million")
  isFree                Boolean @map("is_free")
  isLoginRequired       Boolean @map("is_login_required")
  available             Boolean

  providerHashId String   @map("provider_hash_id")
  provider       Provider @relation(fields: [providerHashId], references: [hashId], onDelete: Restrict, onUpdate: Cascade)

  configs  Config[]
  contents Content[]

  @@map("models")
}

model Provider {
  id        Int      @id @default(autoincrement())
  hashId    String   @unique @map("hash_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  name String

  typeHashId String       @map("provider_type_hash_id")
  type       ProviderType @relation(fields: [typeHashId], references: [hashId], onDelete: Restrict, onUpdate: Cascade)

  models Model[]

  @@map("providers")
}

model ProviderType {
  id        Int      @id @default(autoincrement())
  hashId    String   @unique @map("hash_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  type String

  providers Provider[]

  @@map("provider_types")
}

// * * * * * * * * * * * *
// User
// 

model History {
  id        Int      @id @default(autoincrement())
  hashId    String   @unique @map("hash_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  provider     String
  model        String
  config       Json
  messages     Json
  content      String
  response     Json
  price        Float
  inputTokens  Int    @map("input_tokens")
  outputTokens Int    @map("output_tokens")

  apiKeyHashId String? @map("api_key_hash_id")
  apiKey       ApiKey? @relation(fields: [apiKeyHashId], references: [hashId], onDelete: SetNull, onUpdate: Cascade)
  chatHashId   String? @map("chat_hash_id")
  chat         Chat?   @relation(fields: [chatHashId], references: [hashId], onDelete: SetNull, onUpdate: Cascade)
  userHashId   String  @map("user_hash_id")
  user         User    @relation(fields: [userHashId], references: [hashId], onDelete: Restrict, onUpdate: Cascade)

  @@map("histories")
}

model Notification {
  id        Int      @id @default(autoincrement())
  hashId    String   @unique @map("hash_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  message String
  url     String

  userHashId String @map("user_hash_id")
  user       User   @relation(fields: [userHashId], references: [hashId], onDelete: Cascade, onUpdate: Cascade)

  @@map("notifications")
}

model User {
  id        Int      @id @default(autoincrement())
  hashId    String   @unique @map("hash_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  email                 String
  password              String
  name                  String
  bio                   String   @default("")
  notificationCheckedAt DateTime @default(now()) @map("notification_checked_at")

  apiKeys       ApiKey[]
  bookmarks     Bookmark[]
  likes         Like[]
  notifications Notification[]
  apis          Api[]
  posts         Post[]
  comments      Comment[]
  chats         Chat[]
  histories     History[]

  @@map("users")
}
